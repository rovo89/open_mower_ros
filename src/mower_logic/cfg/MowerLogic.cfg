#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t

gen = ParameterGenerator()

gen.add("automatic_mode", int_t, 0, "0 - Manual, 1 - Semiautomatic, 2 - Automatic", 0, 0, 2)
gen.add("undock_distance", double_t, 0, "Distance to drive back for undocking", 2, 0, 100)
gen.add("docking_distance", double_t, 0, "Distance to drive forward during docking", 2, 0, 100)
gen.add("docking_approach_distance", double_t, 0, "Distance to approach docking point", 1.5, 0, 5)
gen.add("docking_retry_count", int_t, 0, "How often should we retry docking", 4, 0, 10)
gen.add("docking_extra_time", double_t, 0, "Continue docking for extra time (s) to ensure good contact", 0, 0, 1.0)
gen.add("docking_redock", bool_t, 0, "Whether to attempt redocking if the voltage is no longer detected after docking.", False)
gen.add("perimeter_signal",int_t, 0, "Which perimeter signal should be used? 0-None, positive number gives signal number and uses counterclockwise docking, negative numbers use clockwise docking", 0, -2, 2)
gen.add("enable_mower", bool_t, 0, "True to enable mow motor", False)
gen.add("manual_pause_mowing", bool_t, 0, "True to disable mowing automatically", False)
gen.add("battery_empty_voltage", double_t, 0, "Voltage to return to docking station (over 20s interval)", 24.0, 20.0, 32.0)
gen.add("battery_critical_voltage", double_t, 0, "Voltage to return to docking station (immediate)", 23.0, 20.0, 32.0)
gen.add("battery_full_voltage", double_t, 0, "Voltage to start mowing again", 29.0, 20.0, 32.0)
gen.add("motor_hot_temperature", double_t, 0, "Motor temperature to pause mowing", 70.0, 20.0, 150.0)
gen.add("motor_cold_temperature", double_t, 0, "Motor temperature to allow mowing", 40.0, 20.0, 150.0)
gen.add("max_position_accuracy", double_t, 0, "We allow driving as long as our position is better than this value (m)", 0.2, 0.01, 1.0)
gen.add("gps_wait_time", double_t, 0, "Time to wait after good GPS fix", 10.0, 0.0, 60.0)
gen.add("gps_timeout", double_t, 0, "Time to allow driving without valid GPS", 10.0, 0.0, 60.0)
gen.add("add_fake_obstacle", bool_t, 0, "True to add a fake obstacle to hopefully help path approach", False)
gen.add("ignore_gps_errors", bool_t, 0, "True to ignore gps errors. USE ONLY FOR SIMULATION!", False)
gen.add("max_first_point_attempts", int_t, 0, "Maximum attempts to reach the first point of the mow path before trimming", 3, 1, 10)
gen.add("max_first_point_trim_attempts", int_t, 0, "After <max_first_point_attempts> we start to trim the path beginning this often", 3, 1, 10)

exit(gen.generate("mower_logic", "mower_logic", "MowerLogic"))
